version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: semantest-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-semantest}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-semantest_dev}
      POSTGRES_DB: ${DB_NAME:-semantest}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-semantest}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - semantest-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: semantest-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev}
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis_dev}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - semantest-network

  # Node.js Server
  nodejs-server:
    build:
      context: ./nodejs.server
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: semantest-nodejs-server
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${SERVER_PORT:-3001}
      DATABASE_URL: postgresql://${DB_USER:-semantest}:${DB_PASSWORD:-semantest_dev}@postgres:5432/${DB_NAME:-semantest}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_dev}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_secret_change_in_production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${SERVER_PORT:-3001}:${SERVER_PORT:-3001}"
    volumes:
      - ./nodejs.server:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - semantest-network
    command: ${NODE_SERVER_CMD:-npm run dev}

  # TypeScript Client
  typescript-client:
    build:
      context: ./typescript.client
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: semantest-typescript-client
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3001}
      NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost:3001}
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    volumes:
      - ./typescript.client:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - nodejs-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - semantest-network
    command: ${CLIENT_CMD:-npm run dev}

  # Browser Extension Development Server
  extension-dev:
    build:
      context: ./extension.chrome
      dockerfile: Dockerfile.dev
    container_name: semantest-extension-dev
    environment:
      NODE_ENV: development
      API_URL: ${API_URL:-http://localhost:3001}
    ports:
      - "${EXTENSION_PORT:-8080}:8080"
    volumes:
      - ./extension.chrome:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - semantest-network
    command: npm run dev

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: semantest-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - semantest-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: semantest-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - semantest-network

  # Monitoring - Loki (for logs)
  loki:
    image: grafana/loki:latest
    container_name: semantest-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - semantest-network

  # Monitoring - Promtail (log collector)
  promtail:
    image: grafana/promtail:latest
    container_name: semantest-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - semantest-network

  # Development Tools - Adminer (DB UI)
  adminer:
    image: adminer:latest
    container_name: semantest-adminer
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - semantest-network

  # Development Tools - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: semantest-redis-commander
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis_dev}
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - semantest-network

networks:
  semantest-network:
    driver: bridge
    name: semantest-network

volumes:
  postgres_data:
    name: semantest-postgres-data
  redis_data:
    name: semantest-redis-data
  grafana_data:
    name: semantest-grafana-data
  prometheus_data:
    name: semantest-prometheus-data
  loki_data:
    name: semantest-loki-data