global
    log stdout local0
    maxconn 4096
    stats socket /var/run/haproxy.stats mode 660
    tune.ssl.default-dh-param 2048

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor except 127.0.0.0/8
    timeout connect 5s
    timeout client  30s
    timeout server  30s
    timeout tunnel  3600s
    timeout http-keep-alive 1s
    timeout http-request 15s
    timeout queue 30s
    errorfile 503 /usr/local/etc/haproxy/errors/503.http

# Stats page
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE

# Frontend for WebSocket traffic
frontend websocket_frontend
    bind *:80
    
    # Rate limiting for local traffic
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    tcp-request connection reject if { src_get_gpc0(0) gt 0 }
    
    # ACLs for routing decisions
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_health path_beg /health
    acl local_healthy nbsrv(local_backend) gt 0
    
    # Route to appropriate backend
    use_backend local_backend if local_healthy
    default_backend cloud_backend

# Local backend with health checks
backend local_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Rate limiting: 10 req/s
    stick-table type ip size 100k expire 30s store http_req_rate(1s)
    tcp-request content track-sc0 src
    tcp-request content reject if { sc_http_req_rate(0) gt 10 }
    
    # WebSocket support
    option http-server-close
    timeout tunnel 3600s
    
    # Local servers
    server local1 websocket-server:8080 check inter 5s fall 3 rise 2

# Cloud backend with health checks
backend cloud_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Rate limiting: 100 req/min (â‰ˆ1.67 req/s)
    stick-table type ip size 100k expire 60s store http_req_rate(60s)
    tcp-request content track-sc0 src
    tcp-request content reject if { sc_http_req_rate(0) gt 100 }
    
    # WebSocket support
    option http-server-close
    timeout tunnel 3600s
    
    # Cloud servers (configured via environment)
    server cloud1 ${CLOUD_ENDPOINT_1:-api.semantest.com:443} ssl verify none check inter 10s fall 3 rise 2
    server cloud2 ${CLOUD_ENDPOINT_2:-api-backup.semantest.com:443} ssl verify none check inter 10s fall 3 rise 2 backup