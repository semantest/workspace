openapi: 3.0.0
info:
  title: Image Generation API
  version: 1.0.0
  description: HTTP API for submitting image generation requests

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /events:
    post:
      summary: Submit an image generation request
      description: Sends a GenerateImageRequestedEvent to the server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateImageRequestedEvent'
      responses:
        '202':
          description: Request accepted and queued
          content:
            application/json:
              schema:
                type: object
                properties:
                  correlationId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [queued]
                  queuePosition:
                    type: integer
                    minimum: 0
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable (queue full)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /status/{correlationId}:
    get:
      summary: Check request status
      description: Get the current status of an image generation request
      parameters:
        - name: correlationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatus'
        '404':
          description: Request not found

  /health:
    get:
      summary: Health check
      description: Check if the server is running and WebSocket is connected
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  websocket:
                    type: object
                    properties:
                      connected:
                        type: boolean
                      clients:
                        type: integer
                  queue:
                    type: object
                    properties:
                      size:
                        type: integer
                      processing:
                        type: integer

components:
  schemas:
    GenerateImageRequestedEvent:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum: [GenerateImageRequestedEvent]
        payload:
          type: object
          required:
            - prompt
            - fileName
            - downloadFolder
            - domainName
          properties:
            prompt:
              type: string
              minLength: 1
              maxLength: 1000
              description: Text prompt for image generation
            fileName:
              type: string
              pattern: '^[a-zA-Z0-9._-]+$'
              maxLength: 255
              description: Desired filename without path
            downloadFolder:
              type: string
              pattern: '^/.*'
              description: Absolute path to download directory
            domainName:
              type: string
              enum: [chatgpt.com]
              description: Text-to-image tool domain

    RequestStatus:
      type: object
      properties:
        correlationId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, completed, failed, timeout]
        queuePosition:
          type: integer
          minimum: 0
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        result:
          type: object
          properties:
            filePath:
              type: string
            fileSize:
              type: integer
        error:
          $ref: '#/components/schemas/ErrorResponse'

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object