{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "semantest-cluster",
      "metadata": {
        "description": "Name of the AKS cluster"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of nodes in the cluster"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Size of the virtual machines"
      }
    },
    "sqlServerName": {
      "type": "string",
      "defaultValue": "[concat('semantest-sql-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the SQL Server"
      }
    },
    "sqlDatabaseName": {
      "type": "string",
      "defaultValue": "semantest",
      "metadata": {
        "description": "Name of the SQL Database"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "defaultValue": "semantest",
      "metadata": {
        "description": "SQL Server administrator login"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server administrator password"
      }
    },
    "redisName": {
      "type": "string",
      "defaultValue": "[concat('semantest-redis-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Redis cache"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[concat('semantestacr', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the container registry"
      }
    }
  },
  "variables": {
    "vnetName": "[concat(parameters('clusterName'), '-vnet')]",
    "subnetName": "[concat(parameters('clusterName'), '-subnet')]",
    "nsgName": "[concat(parameters('clusterName'), '-nsg')]",
    "publicIPName": "[concat(parameters('clusterName'), '-pip')]",
    "loadBalancerName": "[concat(parameters('clusterName'), '-lb')]",
    "storageAccountName": "[concat('semantest', uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat('semantest-kv-', uniqueString(resourceGroup().id))]",
    "logAnalyticsName": "[concat('semantest-logs-', uniqueString(resourceGroup().id))]",
    "applicationInsightsName": "[concat('semantest-ai-', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-05-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["10.0.0.0/16"]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-05-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPS",
            "properties": {
              "priority": 1000,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTP",
            "properties": {
              "priority": 1001,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2023-08-01",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[parameters('clusterName')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": 0,
            "count": "[parameters('nodeCount')]",
            "vmSize": "[parameters('vmSize')]",
            "osType": "Linux",
            "mode": "System",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
          }
        ],
        "networkProfile": {
          "networkPlugin": "azure",
          "serviceCidr": "10.1.0.0/16",
          "dnsServiceIP": "10.1.0.10",
          "dockerBridgeCidr": "172.17.0.1/16"
        },
        "addonProfiles": {
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2023-05-01-preview",
      "name": "[parameters('sqlServerName')]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "databases",
          "apiVersion": "2023-05-01-preview",
          "name": "[parameters('sqlDatabaseName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
          ],
          "sku": {
            "name": "S1",
            "tier": "Standard"
          },
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS"
          }
        },
        {
          "type": "firewallRules",
          "apiVersion": "2023-05-01-preview",
          "name": "AllowAzureServices",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2023-08-01",
      "name": "[parameters('redisName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "Standard",
          "family": "C",
          "capacity": 1
        },
        "redisConfiguration": {
          "maxmemory-policy": "allkeys-lru"
        },
        "enableNonSslPort": false,
        "redisVersion": "6"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ],
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      }
    }
  ],
  "outputs": {
    "clusterName": {
      "type": "string",
      "value": "[parameters('clusterName')]"
    },
    "controlPlaneFQDN": {
      "type": "string",
      "value": "[reference(parameters('clusterName')).fqdn]"
    },
    "sqlServerFQDN": {
      "type": "string",
      "value": "[reference(parameters('sqlServerName')).fullyQualifiedDomainName]"
    },
    "redisHostName": {
      "type": "string",
      "value": "[reference(parameters('redisName')).hostName]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[parameters('containerRegistryName')]"
    }
  }
}