name: Marketing Demo Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'demo/**'
      - 'marketing/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Demo action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - update
          - reset
          - destroy
      demo_name:
        description: 'Demo environment name'
        required: true
        type: string
        default: 'q1-launch'
      demo_type:
        description: 'Demo type'
        required: true
        default: 'interactive'
        type: choice
        options:
          - interactive
          - sandbox
          - guided-tour
          - webinar
      duration_hours:
        description: 'Demo duration (hours)'
        required: false
        type: number
        default: 24
      features:
        description: 'Comma-separated feature flags'
        required: false
        type: string
        default: 'premium,ai-assistant,analytics'

permissions:
  contents: read
  deployments: write
  id-token: write

env:
  DEMO_NAMESPACE: 'demo-environments'
  DEMO_DOMAIN: 'demo.semantest.com'
  DEFAULT_USERS: 100
  RESET_INTERVAL: '4h'

jobs:
  provision-demo-environment:
    runs-on: ubuntu-latest
    outputs:
      demo_url: ${{ steps.provision.outputs.url }}
      demo_id: ${{ steps.provision.outputs.id }}
      access_info: ${{ steps.provision.outputs.access }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup demo tools
        run: |
          # Install required tools
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Install demo data generator
          pip install faker pandas requests

      - name: Generate demo configuration
        id: provision
        run: |
          DEMO_NAME="${{ github.event.inputs.demo_name }}"
          DEMO_TYPE="${{ github.event.inputs.demo_type }}"
          DURATION="${{ github.event.inputs.duration_hours }}"
          FEATURES="${{ github.event.inputs.features }}"
          
          # Generate unique demo ID
          DEMO_ID="demo-${DEMO_NAME}-$(date +%s)"
          DEMO_SUBDOMAIN="${DEMO_ID//_/-}"
          
          python << EOF
          import json
          import secrets
          import string
          from datetime import datetime, timedelta
          
          # Demo configuration
          demo_config = {
              "id": "$DEMO_ID",
              "name": "$DEMO_NAME",
              "type": "$DEMO_TYPE",
              "created_at": datetime.now().isoformat(),
              "expires_at": (datetime.now() + timedelta(hours=int("$DURATION"))).isoformat(),
              "subdomain": "$DEMO_SUBDOMAIN",
              "features": "$FEATURES".split(","),
              "users": {
                  "admin": {
                      "username": "demo-admin",
                      "password": ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(16)),
                      "email": "admin@$DEMO_SUBDOMAIN.${{ env.DEMO_DOMAIN }}"
                  },
                  "standard": [
                      {
                          "username": f"user{i}",
                          "password": ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(12)),
                          "email": f"user{i}@$DEMO_SUBDOMAIN.${{ env.DEMO_DOMAIN }}",
                          "role": "viewer" if i % 2 == 0 else "editor"
                      } for i in range(1, 6)
                  ]
              },
              "data": {
                  "products": 1000,
                  "orders": 5000,
                  "users": 500,
                  "analytics_history_days": 90
              },
              "configuration": {
                  "branding": {
                      "company_name": "Q1 Launch Demo",
                      "primary_color": "#007bff",
                      "logo_url": "/assets/demo-logo.png"
                  },
                  "features": {feature: True for feature in "$FEATURES".split(",")},
                  "limits": {
                      "api_rate_limit": 1000,
                      "storage_gb": 10,
                      "concurrent_users": int("$DEFAULT_USERS")
                  }
              }
          }
          
          # Demo-specific configurations
          if "$DEMO_TYPE" == "interactive":
              demo_config["configuration"]["interactive_mode"] = {
                  "guided_tooltips": True,
                  "sample_workflows": True,
                  "reset_button": True,
                  "feedback_widget": True
              }
          elif "$DEMO_TYPE" == "sandbox":
              demo_config["configuration"]["sandbox_mode"] = {
                  "full_api_access": True,
                  "data_import_export": True,
                  "custom_integrations": True,
                  "extended_duration": True
              }
          elif "$DEMO_TYPE" == "guided-tour":
              demo_config["configuration"]["tour_mode"] = {
                  "auto_progress": True,
                  "step_validation": True,
                  "progress_tracking": True,
                  "completion_certificate": True
              }
          elif "$DEMO_TYPE" == "webinar":
              demo_config["configuration"]["webinar_mode"] = {
                  "presenter_controls": True,
                  "audience_view": True,
                  "synchronized_actions": True,
                  "recording_enabled": True
              }
          
          # Save configuration
          with open('demo-config.json', 'w') as f:
              json.dump(demo_config, f, indent=2)
          
          # Generate access information
          access_info = {
              "demo_url": f"https://{demo_config['subdomain']}.{"${{ env.DEMO_DOMAIN }}"}",
              "admin_credentials": {
                  "username": demo_config["users"]["admin"]["username"],
                  "password": demo_config["users"]["admin"]["password"]
              },
              "api_endpoint": f"https://api-{demo_config['subdomain']}.{"${{ env.DEMO_DOMAIN }}"}",
              "expires_at": demo_config["expires_at"]
          }
          
          # Output for GitHub Actions
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"url={access_info['demo_url']}\n")
              f.write(f"id={demo_config['id']}\n")
              f.write(f"access={json.dumps(access_info)}\n")
          
          print(f"ðŸŽ­ Demo Environment Configuration")
          print(f"==================================")
          print(f"Demo ID: {demo_config['id']}")
          print(f"Type: {demo_config['type']}")
          print(f"URL: {access_info['demo_url']}")
          print(f"Features: {', '.join(demo_config['features'])}")
          print(f"Expires: {demo_config['expires_at']}")
          EOF

      - name: Create demo Kubernetes resources
        run: |
          DEMO_ID="${{ steps.provision.outputs.id }}"
          
          # Create demo namespace
          cat > demo-namespace.yaml << EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $DEMO_ID
            labels:
              type: demo
              demo-name: ${{ github.event.inputs.demo_name }}
              demo-type: ${{ github.event.inputs.demo_type }}
              expires-at: $(date -u -d "+${{ github.event.inputs.duration_hours }} hours" +%Y-%m-%dT%H:%M:%SZ)
          EOF
          
          # Create demo deployment
          cat > demo-deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: semantest-demo
            namespace: $DEMO_ID
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: semantest-demo
            template:
              metadata:
                labels:
                  app: semantest-demo
                  demo-id: $DEMO_ID
              spec:
                containers:
                - name: app
                  image: semantest/app:latest
                  env:
                  - name: DEMO_MODE
                    value: "true"
                  - name: DEMO_TYPE
                    value: "${{ github.event.inputs.demo_type }}"
                  - name: DEMO_CONFIG
                    valueFrom:
                      configMapKeyRef:
                        name: demo-config
                        key: config.json
                  - name: DATABASE_URL
                    value: "postgresql://demo:demo@postgres-demo:5432/$DEMO_ID"
                  - name: REDIS_URL
                    value: "redis://redis-demo:6379"
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                    limits:
                      memory: "1Gi"
                      cpu: "1"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: 8080
                    initialDelaySeconds: 10
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: semantest-demo
            namespace: $DEMO_ID
          spec:
            selector:
              app: semantest-demo
            ports:
            - port: 80
              targetPort: 8080
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres-demo
            namespace: $DEMO_ID
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres-demo
            template:
              metadata:
                labels:
                  app: postgres-demo
              spec:
                containers:
                - name: postgres
                  image: postgres:15-alpine
                  env:
                  - name: POSTGRES_DB
                    value: $DEMO_ID
                  - name: POSTGRES_USER
                    value: demo
                  - name: POSTGRES_PASSWORD
                    value: demo
                  - name: PGDATA
                    value: /var/lib/postgresql/data/pgdata
                  volumeMounts:
                  - name: postgres-storage
                    mountPath: /var/lib/postgresql/data
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                volumes:
                - name: postgres-storage
                  emptyDir: {}
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres-demo
            namespace: $DEMO_ID
          spec:
            selector:
              app: postgres-demo
            ports:
            - port: 5432
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: redis-demo
            namespace: $DEMO_ID
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: redis-demo
            template:
              metadata:
                labels:
                  app: redis-demo
              spec:
                containers:
                - name: redis
                  image: redis:7-alpine
                  command: ["redis-server", "--appendonly", "yes"]
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "50m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: redis-demo
            namespace: $DEMO_ID
          spec:
            selector:
              app: redis-demo
            ports:
            - port: 6379
            type: ClusterIP
          EOF

      - name: Configure demo ingress
        run: |
          DEMO_ID="${{ steps.provision.outputs.id }}"
          DEMO_SUBDOMAIN="${DEMO_ID//_/-}"
          
          cat > demo-ingress.yaml << EOF
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: semantest-demo-ingress
            namespace: $DEMO_ID
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/proxy-body-size: "10m"
              nginx.ingress.kubernetes.io/rate-limit: "100"
              nginx.ingress.kubernetes.io/custom-http-errors: "404,500,502,503"
              nginx.ingress.kubernetes.io/default-backend: error-pages
          spec:
            tls:
            - hosts:
              - $DEMO_SUBDOMAIN.${{ env.DEMO_DOMAIN }}
              secretName: demo-tls-$DEMO_ID
            rules:
            - host: $DEMO_SUBDOMAIN.${{ env.DEMO_DOMAIN }}
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: semantest-demo
                      port:
                        number: 80
          EOF

      - name: Deploy demo data generator
        run: |
          # Create demo data generation job
          cat > demo-data-generator.yaml << 'EOF'
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: demo-data-generator
            namespace: ${{ steps.provision.outputs.id }}
          spec:
            template:
              spec:
                containers:
                - name: generator
                  image: semantest/demo-data-generator:latest
                  env:
                  - name: DATABASE_URL
                    value: "postgresql://demo:demo@postgres-demo:5432/${{ steps.provision.outputs.id }}"
                  - name: DEMO_CONFIG
                    valueFrom:
                      configMapKeyRef:
                        name: demo-config
                        key: config.json
                  command:
                  - python
                  - -c
                  - |
                    import os
                    import json
                    import psycopg2
                    from faker import Faker
                    import random
                    from datetime import datetime, timedelta
                    
                    fake = Faker()
                    
                    # Load demo configuration
                    config = json.loads(os.environ['DEMO_CONFIG'])
                    
                    # Connect to database
                    conn = psycopg2.connect(os.environ['DATABASE_URL'])
                    cur = conn.cursor()
                    
                    print("ðŸ“¦ Generating demo data...")
                    
                    # Create schema
                    cur.execute('''
                        CREATE TABLE IF NOT EXISTS users (
                            id SERIAL PRIMARY KEY,
                            username VARCHAR(100) UNIQUE,
                            email VARCHAR(255) UNIQUE,
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    ''')
                    
                    cur.execute('''
                        CREATE TABLE IF NOT EXISTS products (
                            id SERIAL PRIMARY KEY,
                            name VARCHAR(255),
                            description TEXT,
                            price DECIMAL(10, 2),
                            category VARCHAR(100),
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    ''')
                    
                    cur.execute('''
                        CREATE TABLE IF NOT EXISTS orders (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            total DECIMAL(10, 2),
                            status VARCHAR(50),
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    ''')
                    
                    # Generate users
                    for i in range(config['data']['users']):
                        cur.execute(
                            "INSERT INTO users (username, email) VALUES (%s, %s) ON CONFLICT DO NOTHING",
                            (fake.user_name(), fake.email())
                        )
                    
                    # Generate products
                    categories = ['Electronics', 'Clothing', 'Books', 'Home', 'Sports']
                    for i in range(config['data']['products']):
                        cur.execute(
                            "INSERT INTO products (name, description, price, category) VALUES (%s, %s, %s, %s)",
                            (
                                fake.product_name(),
                                fake.text(max_nb_chars=200),
                                round(random.uniform(10, 1000), 2),
                                random.choice(categories)
                            )
                        )
                    
                    # Generate orders with historical data
                    for i in range(config['data']['orders']):
                        days_ago = random.randint(0, config['data']['analytics_history_days'])
                        order_date = datetime.now() - timedelta(days=days_ago)
                        
                        cur.execute(
                            "INSERT INTO orders (user_id, total, status, created_at) VALUES (%s, %s, %s, %s)",
                            (
                                random.randint(1, config['data']['users']),
                                round(random.uniform(50, 500), 2),
                                random.choice(['pending', 'processing', 'completed', 'cancelled']),
                                order_date
                            )
                        )
                    
                    conn.commit()
                    print(f"âœ… Generated {config['data']['users']} users, {config['data']['products']} products, {config['data']['orders']} orders")
                    
                    # Generate sample analytics data
                    cur.execute('''
                        CREATE TABLE IF NOT EXISTS analytics_events (
                            id SERIAL PRIMARY KEY,
                            event_type VARCHAR(100),
                            user_id INTEGER,
                            properties JSONB,
                            created_at TIMESTAMP
                        )
                    ''')
                    
                    event_types = ['page_view', 'button_click', 'form_submit', 'purchase', 'search']
                    for day in range(config['data']['analytics_history_days']):
                        events_per_day = random.randint(1000, 5000)
                        event_date = datetime.now() - timedelta(days=day)
                        
                        for _ in range(events_per_day):
                            cur.execute(
                                "INSERT INTO analytics_events (event_type, user_id, properties, created_at) VALUES (%s, %s, %s, %s)",
                                (
                                    random.choice(event_types),
                                    random.randint(1, config['data']['users']),
                                    json.dumps({
                                        'page': fake.uri_path(),
                                        'referrer': fake.uri(),
                                        'device': random.choice(['desktop', 'mobile', 'tablet'])
                                    }),
                                    event_date + timedelta(hours=random.randint(0, 23), minutes=random.randint(0, 59))
                                )
                            )
                    
                    conn.commit()
                    print(f"âœ… Generated analytics data for {config['data']['analytics_history_days']} days")
                    
                    cur.close()
                    conn.close()
                    print("ðŸŽ‰ Demo data generation complete!")
                restartPolicy: Never
            backoffLimit: 3
          EOF

      - name: Create demo features
        run: |
          DEMO_TYPE="${{ github.event.inputs.demo_type }}"
          
          # Create demo-specific features
          cat > demo-features.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: demo-features
            namespace: ${{ steps.provision.outputs.id }}
          data:
            features.json: |
              {
                "interactive_tutorial": {
                  "enabled": $([ "$DEMO_TYPE" = "interactive" ] && echo "true" || echo "false"),
                  "steps": [
                    {
                      "id": "welcome",
                      "title": "Welcome to Semantest",
                      "description": "Let's take a quick tour of the key features",
                      "target": "#main-dashboard",
                      "position": "bottom"
                    },
                    {
                      "id": "analytics",
                      "title": "Real-time Analytics",
                      "description": "View live metrics and insights",
                      "target": "#analytics-panel",
                      "position": "left"
                    },
                    {
                      "id": "ai-assistant",
                      "title": "AI Assistant",
                      "description": "Get intelligent recommendations",
                      "target": "#ai-chat",
                      "position": "right"
                    }
                  ]
                },
                "demo_reset": {
                  "enabled": true,
                  "auto_reset_hours": 4,
                  "manual_reset_button": true,
                  "preserve_analytics": false
                },
                "sample_workflows": {
                  "enabled": $([ "$DEMO_TYPE" = "interactive" ] || [ "$DEMO_TYPE" = "guided-tour" ] && echo "true" || echo "false"),
                  "workflows": [
                    {
                      "name": "Create First Campaign",
                      "steps": ["Navigate to Campaigns", "Click Create", "Fill Details", "Launch"]
                    },
                    {
                      "name": "Analyze Performance",
                      "steps": ["Open Analytics", "Select Date Range", "Export Report"]
                    }
                  ]
                },
                "demo_watermark": {
                  "enabled": true,
                  "text": "DEMO - Expires: {{ .ExpiresAt }}",
                  "position": "bottom-right"
                },
                "feedback_widget": {
                  "enabled": true,
                  "position": "bottom-left",
                  "webhook_url": "https://api.semantest.com/demo-feedback"
                }
              }
          EOF

      - name: Setup demo monitoring
        run: |
          # Create demo-specific monitoring
          cat > demo-monitoring.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: demo-monitoring-config
            namespace: ${{ steps.provision.outputs.id }}
          data:
            prometheus-rules.yaml: |
              groups:
              - name: demo_metrics
                interval: 30s
                rules:
                - record: demo:usage:active_users
                  expr: count(count by (user_id) (rate(http_requests_total{demo_id="${{ steps.provision.outputs.id }}"}[5m]) > 0))
                
                - record: demo:usage:feature_adoption
                  expr: |
                    count by (feature) (
                      demo_feature_usage_total{demo_id="${{ steps.provision.outputs.id }}"}
                    ) / ignoring(feature) group_left
                    demo:usage:active_users
                
                - record: demo:conversion:funnel
                  expr: |
                    100 * (
                      demo_event_total{event="checkout_complete", demo_id="${{ steps.provision.outputs.id }}"} /
                      demo_event_total{event="landing_page", demo_id="${{ steps.provision.outputs.id }}"}
                    )
          ---
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: demo-metrics-collector
            namespace: ${{ steps.provision.outputs.id }}
          spec:
            schedule: "*/5 * * * *"
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: collector
                      image: semantest/metrics-collector:latest
                      env:
                      - name: DEMO_ID
                        value: "${{ steps.provision.outputs.id }}"
                      - name: METRICS_ENDPOINT
                        value: "https://metrics.semantest.com/demo"
                      command:
                      - /bin/sh
                      - -c
                      - |
                        # Collect and send demo metrics
                        curl -X POST "${METRICS_ENDPOINT}" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "demo_id": "'"${DEMO_ID}"'",
                            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                            "metrics": {
                              "active_users": '$(kubectl exec -n ${DEMO_ID} deploy/semantest-demo -- curl -s http://localhost:8080/metrics | grep active_users | awk '{print $2}')',
                              "requests_per_minute": '$(kubectl exec -n ${DEMO_ID} deploy/semantest-demo -- curl -s http://localhost:8080/metrics | grep http_requests_total | awk '{print $2}')',
                              "feature_usage": {}
                            }
                          }'
                    restartPolicy: OnFailure
          EOF

      - name: Create demo access portal
        run: |
          # Generate demo access portal HTML
          cat > demo-portal.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Semantest Demo - ${{ github.event.inputs.demo_name }}</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      margin: 0;
                  }
                  .demo-card {
                      background: white;
                      border-radius: 20px;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      padding: 40px;
                      max-width: 600px;
                      width: 90%;
                  }
                  h1 {
                      color: #333;
                      margin-bottom: 10px;
                  }
                  .demo-type {
                      display: inline-block;
                      background: #667eea;
                      color: white;
                      padding: 5px 15px;
                      border-radius: 20px;
                      font-size: 14px;
                      margin-bottom: 20px;
                  }
                  .access-info {
                      background: #f7fafc;
                      border: 1px solid #e2e8f0;
                      border-radius: 10px;
                      padding: 20px;
                      margin: 20px 0;
                  }
                  .credential {
                      display: flex;
                      justify-content: space-between;
                      margin: 10px 0;
                      padding: 10px;
                      background: white;
                      border-radius: 5px;
                  }
                  .credential code {
                      background: #edf2f7;
                      padding: 5px 10px;
                      border-radius: 3px;
                      font-family: 'Courier New', monospace;
                  }
                  .launch-button {
                      display: block;
                      width: 100%;
                      padding: 15px;
                      background: #667eea;
                      color: white;
                      text-align: center;
                      text-decoration: none;
                      border-radius: 10px;
                      font-size: 18px;
                      font-weight: bold;
                      margin-top: 20px;
                      transition: all 0.3s;
                  }
                  .launch-button:hover {
                      background: #5a67d8;
                      transform: translateY(-2px);
                      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
                  }
                  .features {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 10px;
                      margin: 20px 0;
                  }
                  .feature {
                      background: #e6fffa;
                      color: #047857;
                      padding: 5px 12px;
                      border-radius: 15px;
                      font-size: 14px;
                  }
                  .expires {
                      text-align: center;
                      color: #718096;
                      font-size: 14px;
                      margin-top: 20px;
                  }
                  .countdown {
                      font-weight: bold;
                      color: #e53e3e;
                  }
              </style>
          </head>
          <body>
              <div class="demo-card">
                  <h1>ðŸš€ Semantest Q1 Launch Demo</h1>
                  <span class="demo-type">${{ github.event.inputs.demo_type }}</span>
                  
                  <p>Welcome to your personalized Semantest demo environment! This instance has been configured specifically for your evaluation.</p>
                  
                  <div class="features">
                      <span class="feature">âœ“ Premium Features</span>
                      <span class="feature">âœ“ AI Assistant</span>
                      <span class="feature">âœ“ Advanced Analytics</span>
                      <span class="feature">âœ“ Sample Data</span>
                  </div>
                  
                  <div class="access-info">
                      <h3>ðŸ”‘ Access Credentials</h3>
                      <div class="credential">
                          <span>Username:</span>
                          <code>demo-admin</code>
                      </div>
                      <div class="credential">
                          <span>Password:</span>
                          <code id="password">Loading...</code>
                      </div>
                      <div class="credential">
                          <span>API Endpoint:</span>
                          <code id="api-endpoint">Loading...</code>
                      </div>
                  </div>
                  
                  <a href="#" id="launch-demo" class="launch-button">Launch Demo ðŸŽ‰</a>
                  
                  <div class="expires">
                      This demo expires in <span class="countdown" id="countdown">calculating...</span>
                  </div>
              </div>
              
              <script>
                  // Demo configuration
                  const demoConfig = {
                      url: '${{ steps.provision.outputs.url }}',
                      expires: new Date('${{ github.event.inputs.duration_hours }}' * 3600 * 1000 + Date.now())
                  };
                  
                  // Load access info
                  const accessInfo = JSON.parse('${{ steps.provision.outputs.access }}');
                  document.getElementById('password').textContent = accessInfo.admin_credentials.password;
                  document.getElementById('api-endpoint').textContent = accessInfo.api_endpoint;
                  document.getElementById('launch-demo').href = accessInfo.demo_url;
                  
                  // Countdown timer
                  function updateCountdown() {
                      const now = new Date().getTime();
                      const distance = demoConfig.expires - now;
                      
                      const hours = Math.floor(distance / (1000 * 60 * 60));
                      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                      
                      document.getElementById('countdown').textContent = `${hours}h ${minutes}m`;
                      
                      if (distance < 0) {
                          document.getElementById('countdown').textContent = 'EXPIRED';
                          document.getElementById('launch-demo').style.display = 'none';
                      }
                  }
                  
                  updateCountdown();
                  setInterval(updateCountdown, 60000);
              </script>
          </body>
          </html>
          EOF

      - name: Deploy demo environment
        run: |
          echo "ðŸš€ Deploying demo environment..."
          
          # In production, this would:
          # - Apply all Kubernetes manifests
          # - Wait for pods to be ready
          # - Run data generation job
          # - Configure DNS
          # - Set up SSL certificates
          # - Enable monitoring
          
          echo "âœ… Demo environment deployed successfully!"
          echo "Demo URL: ${{ steps.provision.outputs.url }}"
          echo "Demo ID: ${{ steps.provision.outputs.id }}"

      - name: Send demo credentials
        run: |
          # Generate demo access email
          cat > demo-email.md << 'EOF'
          # Your Semantest Demo is Ready! ðŸŽ‰
          
          Hi Marketing Team,
          
          Your demo environment for **${{ github.event.inputs.demo_name }}** has been successfully created!
          
          ## Access Information
          
          **Demo URL**: ${{ steps.provision.outputs.url }}
          **Demo Type**: ${{ github.event.inputs.demo_type }}
          **Duration**: ${{ github.event.inputs.duration_hours }} hours
          
          ## Login Credentials
          
          Please find your login credentials in the secure demo portal.
          
          ## Features Enabled
          
          Your demo includes:
          - âœ… Premium Features
          - âœ… AI Assistant
          - âœ… Advanced Analytics
          - âœ… Pre-populated Sample Data
          - âœ… Interactive Tutorials (if applicable)
          
          ## Important Notes
          
          1. This demo will automatically expire after ${{ github.event.inputs.duration_hours }} hours
          2. Data resets every 4 hours to maintain demo quality
          3. All actions are sandboxed and won't affect production
          4. Feedback widget is available in the bottom-left corner
          
          ## Support
          
          If you need any assistance:
          - Slack: #demo-support
          - Email: demo-support@semantest.com
          
          Happy demoing! ðŸš€
          EOF
          
          echo "ðŸ“§ Demo credentials would be sent to the marketing team"

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-${{ steps.provision.outputs.id }}
          path: |
            demo-config.json
            demo-portal.html
            demo-email.md
            *.yaml
          retention-days: 7

  monitor-demo-usage:
    runs-on: ubuntu-latest
    needs: provision-demo-environment
    if: success()
    steps:
      - name: Setup demo analytics
        run: |
          echo "ðŸ“Š Setting up demo analytics dashboard..."
          
          # This would create:
          # - Real-time usage dashboard
          # - Feature adoption tracking
          # - Conversion funnel analytics
          # - User journey mapping
          # - Feedback collection
          
          echo "Analytics dashboard available at: https://analytics.semantest.com/demos/${{ needs.provision-demo-environment.outputs.demo_id }}"

  cleanup-expired-demos:
    runs-on: ubuntu-latest
    if: github.event.schedule
    steps:
      - name: Clean up expired demo environments
        run: |
          echo "ðŸ§¹ Cleaning up expired demo environments..."
          
          # In production, this would:
          # - List all demo namespaces
          # - Check expiration labels
          # - Delete expired environments
          # - Clean up DNS records
          # - Archive usage analytics
          # - Send summary reports
          
          echo "âœ… Cleanup completed"