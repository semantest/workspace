name: Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
      module:
        description: 'Specific module to test (optional)'
        required: false
        type: string

concurrency:
  group: test-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine test matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.module }}" != "" ]]; then
            # Test specific module
            echo "matrix={\"module\":[\"${{ github.event.inputs.module }}\"]}" >> $GITHUB_OUTPUT
          else
            # Test all modules that have tests
            modules=()
            for dir in core browser google.com images.google.com chatgpt.com extension.chrome nodejs.server typescript.client ar-vr; do
              if [[ -d "$dir" && (-f "$dir/package.json" || -d "$dir/tests" || -d "$dir/src") ]]; then
                modules+=("\"$dir\"")
              fi
            done
            matrix_json=$(printf '%s,' "${modules[@]}")
            matrix_json="{\"module\":[${matrix_json%,}]}"
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          fi

  unit-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == '' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Run unit tests for ${{ matrix.module }}
        run: |
          module="${{ matrix.module }}"
          if [[ -d "$module" && -f "$module/package.json" ]]; then
            echo "Running unit tests for $module"
            cd "$module"
            
            # Install dependencies
            npm ci 2>/dev/null || npm install
            
            # Run unit tests with coverage
            if npm run test:coverage 2>/dev/null; then
              echo "✅ Unit tests with coverage completed for $module"
            elif npm run test 2>/dev/null; then
              echo "✅ Unit tests completed for $module"
            elif npx jest 2>/dev/null; then
              echo "✅ Jest tests completed for $module"
            else
              echo "⚠️ No unit tests found for $module"
            fi
          fi
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.module }}
          path: ${{ matrix.module }}/coverage/
        if: always()

  integration-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == '' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Run integration tests for ${{ matrix.module }}
        run: |
          module="${{ matrix.module }}"
          if [[ -d "$module" && -f "$module/package.json" ]]; then
            echo "Running integration tests for $module"
            cd "$module"
            
            # Install dependencies
            npm ci 2>/dev/null || npm install
            
            # Run integration tests
            if npm run test:integration 2>/dev/null; then
              echo "✅ Integration tests completed for $module"
            elif [[ -d "tests/integration" ]]; then
              npx jest tests/integration 2>/dev/null || echo "Integration test runner failed for $module"
            else
              echo "⚠️ No integration tests found for $module"
            fi
          fi

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == '' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests for ${{ matrix.module }}
        run: |
          module="${{ matrix.module }}"
          if [[ -d "$module" && -f "$module/package.json" ]]; then
            echo "Running E2E tests for $module"
            cd "$module"
            
            # Install dependencies
            npm ci 2>/dev/null || npm install
            
            # Run E2E tests
            if npm run test:e2e 2>/dev/null; then
              echo "✅ E2E tests completed for $module"
            elif npx playwright test 2>/dev/null; then
              echo "✅ Playwright tests completed for $module"
            elif [[ -d "tests/e2e" ]]; then
              npx jest tests/e2e 2>/dev/null || echo "E2E test runner failed for $module"
            else
              echo "⚠️ No E2E tests found for $module"
            fi
          fi
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/playwright-report/
            ${{ matrix.module }}/test-results/
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run performance tests for ${{ matrix.module }}
        run: |
          module="${{ matrix.module }}"
          if [[ -d "$module" && -f "$module/package.json" ]]; then
            echo "Running performance tests for $module"
            cd "$module"
            
            # Install dependencies
            npm ci 2>/dev/null || npm install
            
            # Run performance tests
            if npm run test:performance 2>/dev/null; then
              echo "✅ Performance tests completed for $module"
            elif npm run test:perf 2>/dev/null; then
              echo "✅ Performance tests completed for $module"
            else
              echo "⚠️ No performance tests found for $module"
            fi
          fi
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/performance-report/
            ${{ matrix.module }}/lighthouse-reports/
          retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Run security tests for ${{ matrix.module }}
        run: |
          module="${{ matrix.module }}"
          if [[ -d "$module" && -f "$module/package.json" ]]; then
            echo "Running security tests for $module"
            cd "$module"
            
            # Install dependencies
            npm ci 2>/dev/null || npm install
            
            # Security audit
            echo "Running npm audit for $module"
            npm audit --audit-level=moderate || true
            
            # Run security-specific tests if they exist
            if npm run test:security 2>/dev/null; then
              echo "✅ Security tests completed for $module"
            elif [[ -d "tests/security" ]]; then
              npx jest tests/security 2>/dev/null || echo "Security test runner failed for $module"
            else
              echo "⚠️ No security tests found for $module"
            fi
          fi
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-${{ matrix.module }}
          path: |
            ${{ matrix.module }}/security-report/
            ${{ matrix.module }}/audit-report.json
          retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/
      
      - name: Generate test summary
        run: |
          echo "# Test Summary Report" > test-summary.md
          echo "Generated on $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## Test Results Overview" >> test-summary.md
          
          # Count artifacts by type
          unit_count=$(find test-results -name "coverage-*" | wc -l)
          e2e_count=$(find test-results -name "e2e-results-*" | wc -l)
          perf_count=$(find test-results -name "performance-*" | wc -l)
          sec_count=$(find test-results -name "security-*" | wc -l)
          
          echo "- Unit Tests: $unit_count modules tested" >> test-summary.md
          echo "- E2E Tests: $e2e_count modules tested" >> test-summary.md
          echo "- Performance Tests: $perf_count modules tested" >> test-summary.md
          echo "- Security Tests: $sec_count modules tested" >> test-summary.md
          
          echo "" >> test-summary.md
          echo "## Module Coverage" >> test-summary.md
          
          for module_dir in test-results/coverage-*; do
            if [[ -d "$module_dir" ]]; then
              module=$(basename "$module_dir" | sed 's/coverage-//')
              echo "- ✅ $module: Unit tests with coverage" >> test-summary.md
            fi
          done
          
          cat test-summary.md
      
      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30