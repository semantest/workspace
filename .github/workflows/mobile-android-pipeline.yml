name: Android Build and Deploy Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    paths:
      - 'mobile/android/**'
      - 'mobile/shared/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mobile/android/**'
      - 'mobile/shared/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
          - bundle
      deploy_to_play_store:
        description: 'Deploy to Play Store'
        required: false
        type: boolean
        default: false
      deploy_to_firebase:
        description: 'Deploy to Firebase App Distribution'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write

concurrency:
  group: android-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '17'
  ANDROID_COMPILE_SDK: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'
  ANDROID_MIN_SDK: '24'
  ANDROID_TARGET_SDK: '34'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      android_changed: ${{ steps.changes.outputs.android }}
      shared_changed: ${{ steps.changes.outputs.shared }}
      should_build: ${{ steps.changes.outputs.android == 'true' || steps.changes.outputs.shared == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            android:
              - 'mobile/android/**'
            shared:
              - 'mobile/shared/**'

  environment-setup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_build == 'true'
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      build_type: ${{ steps.env.outputs.build_type }}
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment and build type
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "build_type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "build_type=release" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "build_type=debug" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "build_type=release" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "build_type=debug" >> $GITHUB_OUTPUT
          fi

      - name: Generate version name and code
        id: version
        run: |
          # Extract version from build.gradle
          if [[ -f "mobile/android/app/build.gradle" ]]; then
            VERSION_NAME=$(grep "versionName" mobile/android/app/build.gradle | sed 's/.*versionName.*"\(.*\)".*/\1/' | head -1)
            if [[ -z "$VERSION_NAME" || "$VERSION_NAME" == *"versionName"* ]]; then
              VERSION_NAME="1.0.0"
            fi
          else
            VERSION_NAME="1.0.0"
          fi
          
          # Generate version code from timestamp
          VERSION_CODE=$(date +%Y%m%d%H%M | cut -c3-)  # Remove first 2 digits to keep under 2^31
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          
          echo "🤖 Android Build - Version: $VERSION_NAME ($VERSION_CODE)"

  android-security-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install security scanning tools
        run: |
          # Install MobSF CLI
          pip3 install mobsf
          
          # Install Android security tools
          pip3 install semgrep
          npm install -g @microsoft/rush
          
          # Install Android lint and other tools
          sudo apt-get update
          sudo apt-get install -y aapt

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('mobile/android/**/*.gradle*', 'mobile/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Semgrep security scan
        working-directory: mobile/android
        run: |
          semgrep --config=p/security-audit \
                   --config=p/secrets \
                   --config=p/owasp-top-ten \
                   --config=p/java \
                   --config=p/kotlin \
                   --config=p/android \
                   --json --output semgrep-security-report.json \
                   . || true

      - name: Android Lint security check
        working-directory: mobile/android
        run: |
          # Run Android Lint with security focus
          ./gradlew lintDebug || true
          
          # Copy lint results
          find . -name "lint-results*.xml" -exec cp {} lint-security-report.xml \; || true

      - name: Dependency vulnerability scan
        working-directory: mobile/android
        run: |
          # Check for known vulnerable dependencies
          ./gradlew dependencyCheckAnalyze || true
          
          # OWASP dependency check if available
          if [[ -f "build/reports/dependency-check-report.json" ]]; then
            cp build/reports/dependency-check-report.json dependency-vulnerabilities.json
          fi

      - name: AndroidManifest.xml security analysis
        working-directory: mobile/android
        run: |
          echo "🔍 Analyzing Android Manifest security..."
          
          cat > analyze_manifest.py << 'EOF'
          import xml.etree.ElementTree as ET
          import json
          import glob
          
          def analyze_manifest(manifest_path):
              issues = []
              
              try:
                  tree = ET.parse(manifest_path)
                  root = tree.getroot()
                  
                  # Check for debug flags
                  application = root.find('.//application')
                  if application is not None:
                      debug = application.get('{http://schemas.android.com/apk/res/android}debuggable')
                      if debug == 'true':
                          issues.append("DEBUG_FLAG_ENABLED")
                      
                      backup = application.get('{http://schemas.android.com/apk/res/android}allowBackup')
                      if backup == 'true':
                          issues.append("BACKUP_ALLOWED")
                  
                  # Check for dangerous permissions
                  dangerous_perms = [
                      'android.permission.WRITE_EXTERNAL_STORAGE',
                      'android.permission.READ_PHONE_STATE',
                      'android.permission.ACCESS_FINE_LOCATION',
                      'android.permission.CAMERA',
                      'android.permission.RECORD_AUDIO'
                  ]
                  
                  for perm in root.findall('.//uses-permission'):
                      perm_name = perm.get('{http://schemas.android.com/apk/res/android}name')
                      if perm_name in dangerous_perms:
                          issues.append(f"DANGEROUS_PERMISSION: {perm_name}")
                  
                  # Check for exported components without protection
                  for component in root.findall('.//activity') + root.findall('.//service') + root.findall('.//receiver'):
                      exported = component.get('{http://schemas.android.com/apk/res/android}exported')
                      permission = component.get('{http://schemas.android.com/apk/res/android}permission')
                      
                      if exported == 'true' and permission is None:
                          comp_name = component.get('{http://schemas.android.com/apk/res/android}name')
                          issues.append(f"EXPORTED_COMPONENT_NO_PERMISSION: {comp_name}")
                  
                  return issues
              
              except Exception as e:
                  return [f"ANALYSIS_ERROR: {str(e)}"]
          
          # Find and analyze manifest files
          manifests = glob.glob('**/AndroidManifest.xml', recursive=True)
          all_issues = {}
          
          for manifest in manifests:
              issues = analyze_manifest(manifest)
              if issues:
                  all_issues[manifest] = issues
          
          # Save results
          with open('manifest-security-analysis.json', 'w') as f:
              json.dump(all_issues, f, indent=2)
          
          print(f"Analyzed {len(manifests)} manifest files")
          if all_issues:
              print("Security issues found:")
              for manifest, issues in all_issues.items():
                  print(f"  {manifest}: {len(issues)} issues")
          EOF
          
          python3 analyze_manifest.py

      - name: ProGuard/R8 configuration analysis
        working-directory: mobile/android
        run: |
          echo "🔍 Analyzing ProGuard/R8 configuration..."
          
          # Check for ProGuard rules that might expose sensitive information
          find . -name "proguard-rules.pro" -o -name "consumer-rules.pro" | while read rules_file; do
            echo "Analyzing: $rules_file"
            
            # Check for overly permissive rules
            if grep -q "\-dontwarn.*\*\*" "$rules_file"; then
              echo "WARNING: Overly broad -dontwarn rule found in $rules_file"
            fi
            
            if grep -q "\-keep class \*\*" "$rules_file"; then
              echo "WARNING: Overly broad -keep rule found in $rules_file"
            fi
          done > proguard-analysis.txt

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: android-security-reports
          path: |
            mobile/android/semgrep-security-report.json
            mobile/android/lint-security-report.xml
            mobile/android/dependency-vulnerabilities.json
            mobile/android/manifest-security-analysis.json
            mobile/android/proguard-analysis.txt
          retention-days: 30

  android-build:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, android-security-scan]
    if: needs.detect-changes.outputs.should_build == 'true'
    environment:
      name: android-${{ needs.environment-setup.outputs.environment }}
    outputs:
      apk_path: ${{ steps.build.outputs.apk_path }}
      aab_path: ${{ steps.build.outputs.aab_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('mobile/android/**/*.gradle*', 'mobile/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Create keystore for signing
        working-directory: mobile/android
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          if [[ -n "$ANDROID_KEYSTORE_BASE64" ]]; then
            echo "🔑 Setting up Android keystore..."
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > release.keystore
            
            # Create keystore.properties for Gradle
            cat > keystore.properties << EOF
          storeFile=release.keystore
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          keyPassword=$ANDROID_KEY_PASSWORD
          EOF
            
            echo "✅ Keystore configured"
          else
            echo "⚠️ No keystore configured - using debug signing"
          fi

      - name: Update version in build.gradle
        working-directory: mobile/android
        run: |
          VERSION_NAME="${{ needs.environment-setup.outputs.version_name }}"
          VERSION_CODE="${{ needs.environment-setup.outputs.version_code }}"
          
          # Update app-level build.gradle
          if [[ -f "app/build.gradle" ]]; then
            sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle
            sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
          elif [[ -f "app/build.gradle.kts" ]]; then
            sed -i "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/" app/build.gradle.kts
            sed -i "s/versionName = \".*\"/versionName = \"$VERSION_NAME\"/" app/build.gradle.kts
          fi
          
          echo "📱 Updated to version $VERSION_NAME ($VERSION_CODE)"

      - name: Create environment configuration
        working-directory: mobile/android
        run: |
          ENV="${{ needs.environment-setup.outputs.environment }}"
          
          # Create environment-specific configuration
          mkdir -p app/src/main/assets
          
          cat > app/src/main/assets/config.json << EOF
          {
            "environment": "$ENV",
            "apiBaseUrl": "https://api-$ENV.semantest.com",
            "enableLogging": $([ "$ENV" != "production" ] && echo "true" || echo "false"),
            "enableDebugMenu": $([ "$ENV" == "development" ] && echo "true" || echo "false"),
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "${{ needs.environment-setup.outputs.version_name }}",
            "buildNumber": "${{ needs.environment-setup.outputs.version_code }}"
          }
          EOF
          
          echo "⚙️ Environment configuration created for $ENV"

      - name: Build Android APK/AAB
        id: build
        working-directory: mobile/android
        run: |
          BUILD_TYPE="${{ needs.environment-setup.outputs.build_type }}"
          
          case $BUILD_TYPE in
            "debug")
              echo "🔨 Building debug APK..."
              ./gradlew assembleDebug
              APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
              echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
              ;;
            "release")
              echo "🔨 Building release APK..."
              ./gradlew assembleRelease
              APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
              echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
              ;;
            "bundle")
              echo "🔨 Building App Bundle..."
              ./gradlew bundleRelease
              AAB_PATH=$(find app/build/outputs/bundle/release -name "*.aab" | head -1)
              echo "aab_path=$AAB_PATH" >> $GITHUB_OUTPUT
              
              # Also build APK for testing
              ./gradlew assembleRelease
              APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
              echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
              ;;
          esac
          
          # Report file sizes
          if [[ -n "$APK_PATH" && -f "$APK_PATH" ]]; then
            SIZE=$(stat -c%s "$APK_PATH")
            echo "📦 APK size: $(($SIZE / 1024 / 1024)) MB"
            echo "✅ APK built: $APK_PATH"
          fi
          
          if [[ -n "$AAB_PATH" && -f "$AAB_PATH" ]]; then
            SIZE=$(stat -c%s "$AAB_PATH")
            echo "📦 AAB size: $(($SIZE / 1024 / 1024)) MB"
            echo "✅ AAB built: $AAB_PATH"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.version_code }}
          path: |
            mobile/android/app/build/outputs/apk/**/*.apk
            mobile/android/app/build/outputs/bundle/**/*.aab
            mobile/android/app/build/outputs/mapping/**/mapping.txt
          retention-days: 30

  android-testing:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, android-build]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('mobile/android/**/*.gradle*', 'mobile/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Run unit tests
        working-directory: mobile/android
        run: |
          echo "🧪 Running Android unit tests..."
          ./gradlew testDebugUnitTest --continue
          
          # Generate test report
          ./gradlew jacocoTestReport || true

      - name: Run instrumented tests
        working-directory: mobile/android
        run: |
          echo "🧪 Running Android instrumented tests..."
          
          # Enable KVM for Android emulator (if available)
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules || true
          sudo udevadm control --reload-rules || true
          sudo udevadm trigger --name-match=kvm || true
          
          # Create and start emulator
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_emulator \
            -k "system-images;android-30;google_apis;x86_64" \
            -d "pixel" || true
          
          # Start emulator in headless mode
          $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -gpu swiftshader_indirect &
          
          # Wait for emulator to boot
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done'
          
          # Run instrumented tests
          ./gradlew connectedDebugAndroidTest || true
          
          # Stop emulator
          $ANDROID_HOME/platform-tools/adb emu kill || true

      - name: Run lint checks
        working-directory: mobile/android
        run: |
          echo "🔍 Running Android lint..."
          ./gradlew lintDebug || true

      - name: Generate test reports
        working-directory: mobile/android
        run: |
          echo "📊 Generating test reports..."
          
          # Create test summary
          cat > test-summary.md << EOF
          # Android Test Results
          Generated: $(date)
          
          ## Unit Tests
          $(find . -name "TEST-*.xml" | wc -l) test files found
          
          ## Lint Results
          $(find . -name "lint-results*.xml" | wc -l) lint report files found
          
          ## Coverage
          $(find . -name "jacocoTestReport.xml" | wc -l) coverage report files found
          EOF
          
          # Copy reports to a central location
          mkdir -p test-reports
          find . -name "TEST-*.xml" -exec cp {} test-reports/ \; || true
          find . -name "lint-results*.xml" -exec cp {} test-reports/ \; || true
          find . -name "*.exec" -exec cp {} test-reports/ \; || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ needs.environment-setup.outputs.version_code }}
          path: |
            mobile/android/app/build/reports/
            mobile/android/app/build/test-results/
            mobile/android/test-reports/
            mobile/android/test-summary.md
          retention-days: 30

  android-deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, android-build, android-testing]
    if: needs.detect-changes.outputs.should_build == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_play_store == 'true')
    environment:
      name: android-deployment-${{ needs.environment-setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.version_code }}
          path: mobile/android/build-artifacts

      - name: Setup Google Play Console API
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          if [[ -n "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" ]]; then
            echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" > google-play-service-account.json
            echo "✅ Google Play Console API configured"
          else
            echo "⚠️ No Google Play Console API key configured"
          fi

      - name: Deploy to Google Play Store
        if: github.event.inputs.deploy_to_play_store == 'true' || (github.ref == 'refs/heads/main' && needs.environment-setup.outputs.build_type == 'bundle')
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: google-play-service-account.json
          PACKAGE_NAME: com.semantest.app
        run: |
          # Install Google Play CLI tools
          pip3 install google-play-cli
          
          # Find the AAB file
          AAB_FILE=$(find mobile/android/build-artifacts -name "*.aab" | head -1)
          
          if [[ -f "$AAB_FILE" && -f "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" ]]; then
            echo "🏪 Deploying to Google Play Store: $AAB_FILE"
            
            # Upload to internal testing track first
            gplaycli --json-key-file "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" \
                     --package-name "$PACKAGE_NAME" \
                     upload-bundle \
                     --track internal \
                     --bundle-path "$AAB_FILE" \
                     --release-notes "Build ${{ needs.environment-setup.outputs.version_code }} - Automated deployment" || true
            
            echo "✅ Uploaded to Google Play Store (Internal Testing)"
          else
            echo "❌ Cannot deploy - missing AAB file or API credentials"
          fi

  android-beta-distribution:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, android-build]
    if: needs.detect-changes.outputs.should_build == 'true' && (needs.environment-setup.outputs.build_type == 'debug' || github.event.inputs.deploy_to_firebase == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.version_code }}
          path: mobile/android/build-artifacts

      - name: Distribute to Firebase App Distribution
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Find the APK file
          APK_FILE=$(find mobile/android/build-artifacts -name "*.apk" | head -1)
          
          if [[ -f "$APK_FILE" && -n "$FIREBASE_TOKEN" ]]; then
            echo "🤖 Distributing Android beta to Firebase: $APK_FILE"
            
            firebase appdistribution:distribute "$APK_FILE" \
              --app "$FIREBASE_APP_ID_ANDROID" \
              --token "$FIREBASE_TOKEN" \
              --groups "internal-testers,qa-team" \
              --release-notes "Android Beta Build ${{ needs.environment-setup.outputs.version_code }}"
            
            echo "✅ Android beta distributed via Firebase"
          else
            echo "⚠️ Skipping Firebase distribution - no APK or token"
          fi

      - name: Upload to GitHub Releases
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APK_FILE=$(find mobile/android/build-artifacts -name "*.apk" | head -1)
          
          if [[ -f "$APK_FILE" ]]; then
            # Create release tag
            TAG="android-v${{ needs.environment-setup.outputs.version_name }}-${{ needs.environment-setup.outputs.version_code }}"
            
            # Create release
            gh release create "$TAG" "$APK_FILE" \
              --title "Android Release ${{ needs.environment-setup.outputs.version_name }} (${{ needs.environment-setup.outputs.version_code }})" \
              --notes "Automated Android build for ${{ needs.environment-setup.outputs.environment }} environment" \
              --prerelease \
              || echo "Release creation failed or already exists"
          fi

  android-pipeline-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, android-security-scan, android-build, android-testing, android-deploy, android-beta-distribution]
    if: always() && needs.detect-changes.outputs.should_build == 'true'
    steps:
      - name: Generate Android pipeline summary
        run: |
          echo "🤖 Android Pipeline Summary"
          echo "=========================="
          echo "Environment: ${{ needs.environment-setup.outputs.environment }}"
          echo "Build Type: ${{ needs.environment-setup.outputs.build_type }}"
          echo "Version Name: ${{ needs.environment-setup.outputs.version_name }}"
          echo "Version Code: ${{ needs.environment-setup.outputs.version_code }}"
          echo ""
          echo "Job Results:"
          echo "- Security Scan: ${{ needs.android-security-scan.result }}"
          echo "- Build: ${{ needs.android-build.result }}"
          echo "- Testing: ${{ needs.android-testing.result }}"
          echo "- Deploy: ${{ needs.android-deploy.result }}"
          echo "- Beta Distribution: ${{ needs.android-beta-distribution.result }}"
          echo ""
          
          if [[ "${{ needs.android-build.result }}" == "success" ]]; then
            echo "✅ Android build completed successfully"
          else
            echo "❌ Android build failed"
          fi
          
          if [[ "${{ needs.android-deploy.result }}" == "success" ]]; then
            echo "✅ Android deployment completed"
          elif [[ "${{ needs.android-deploy.result }}" == "skipped" ]]; then
            echo "⏭️ Android deployment skipped"
          else
            echo "❌ Android deployment failed"
          fi