name: WebSocket Server CI/CD

on:
  push:
    branches: [main, develop, 'feature/*']
    paths:
      - 'sdk/**'
      - 'docker-compose.yml'
      - '.github/workflows/websocket-server-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'sdk/**'
      - 'docker-compose.yml'
      - '.github/workflows/websocket-server-ci.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  WEBSOCKET_SERVER_PATH: './sdk/server'

jobs:
  # Lint and Type Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm ci

      - name: Run linter
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm run lint

      - name: Type check
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm run build

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm test -- --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WEBSOCKET_SERVER_PATH }}/coverage
          flags: websocket-server
          name: websocket-server-${{ matrix.node-version }}

  # Integration Tests with Docker
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker compose up -d websocket-server redis
          sleep 10

      - name: Check service health
        run: |
          docker compose ps
          curl -f http://localhost:8080/health || exit 1

      - name: Run integration tests
        run: |
          docker compose exec -T websocket-server npm run test:integration

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > integration-test-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: integration-test-logs.txt

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker compose up -d websocket-server redis
          sleep 10

      - name: Run load tests
        run: |
          # Simple load test using artillery or similar tool
          npx artillery quick --count 100 --num 10 ws://localhost:8080

      - name: Collect metrics
        run: |
          curl http://localhost:8080/metrics > load-test-metrics.txt

      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: load-test-metrics
          path: load-test-metrics.txt

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        working-directory: ${{ env.WEBSOCKET_SERVER_PATH }}
        run: npm audit --production

      - name: Run SAST scan
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec-results.sarif

  # Build and Push Docker Image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/websocket-server
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WEBSOCKET_SERVER_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
    steps:
      - name: Deploy to development
        run: |
          echo "Deploying WebSocket server to development environment..."
          # Add actual deployment commands here