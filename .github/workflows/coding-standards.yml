name: Coding Standards Enforcement

on:
  push:
    branches: [main, develop, 'feature/**', 'Task-*']
  pull_request:
    branches: [main, develop]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🏗️ Build ESLint plugin
        run: npm run build:plugin
      
      - name: 🔍 TypeScript type checking
        run: npm run type-check
      
      - name: 🧹 ESLint validation
        run: npm run lint
      
      - name: 🏗️ Domain boundary validation
        run: npm run lint:domain-boundaries
      
      - name: 🎨 Prettier formatting check
        run: npm run format:check
      
      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
  
  domain-architecture-validation:
    name: Domain Architecture Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🏗️ Build ESLint plugin
        run: npm run build:plugin
      
      - name: 🏗️ Validate aggregate root patterns
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule '@semantest/ddd/aggregate-root-validation: error' \
            --no-error-on-unmatched-pattern
      
      - name: 📋 Validate event naming conventions
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule '@semantest/ddd/event-naming-convention: error' \
            --no-error-on-unmatched-pattern
      
      - name: 🔒 Validate value object immutability
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule '@semantest/ddd/value-object-immutability: error' \
            --no-error-on-unmatched-pattern
      
      - name: 🚧 Validate domain boundaries
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule '@semantest/ddd/domain-boundary-enforcement: error' \
            --no-error-on-unmatched-pattern
      
      - name: 🔄 Validate integration event structure
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule '@semantest/ddd/integration-event-structure: error' \
            --no-error-on-unmatched-pattern
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🛡️ Run security audit
        run: npm audit --audit-level=moderate
      
      - name: 🔍 Run ESLint security rules
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule 'security/detect-unsafe-regex: error' \
            --rule 'security/detect-buffer-noassert: error' \
            --rule 'security/detect-child-process: error' \
            --rule 'security/detect-disable-mustache-escape: error' \
            --rule 'security/detect-eval-with-expression: error' \
            --no-error-on-unmatched-pattern
  
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🏗️ Build ESLint plugin
        run: npm run build:plugin
      
      - name: ⚡ Check code complexity
        run: |
          npx eslint . --config .eslintrc.enhanced.json \
            --ext .ts \
            --rule 'complexity: [error, { max: 10 }]' \
            --rule 'max-depth: [error, { max: 4 }]' \
            --rule 'max-lines: [error, { max: 500 }]' \
            --rule 'max-lines-per-function: [error, { max: 100 }]' \
            --no-error-on-unmatched-pattern
      
      - name: 📊 Bundle size analysis
        run: |
          npm run build
          npx bundlesize check || echo "Bundle size check completed"
  
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 📚 Check documentation completeness
        run: |
          # Check if all domain modules have README files
          for module in video.google.com pinterest.com instagram.com unsplash.com twitter.com; do
            if [ ! -f "${module}/README.md" ]; then
              echo "Missing README.md for ${module}"
              exit 1
            fi
          done
          
          # Check if enhanced documentation exists
          if [ ! -f "docs/ENHANCED_TYPESCRIPT_STYLE_GUIDE.md" ]; then
            echo "Missing enhanced TypeScript style guide"
            exit 1
          fi
          
          if [ ! -f "docs/DOMAIN_EXPANSION_ARCHITECTURE.md" ]; then
            echo "Missing domain expansion architecture documentation"
            exit 1
          fi
          
          echo "Documentation validation passed"
  
  eslint-plugin-validation:
    name: ESLint Plugin Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🏗️ Build ESLint plugin
        run: npm run build:plugin
      
      - name: 🧪 Test ESLint plugin
        run: npm run test:plugin
      
      - name: 🔍 Validate plugin rules
        run: |
          cd eslint-plugin-ddd
          npm run lint
          npm run type-check
  
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: 
      - quality-gates
      - domain-architecture-validation
      - security-scan
      - performance-validation
      - documentation-validation
      - eslint-plugin-validation
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run install:all
      
      - name: 🏗️ Build ESLint plugin
        run: npm run build:plugin
      
      - name: 🎯 Run comprehensive validation
        run: npm run ci
      
      - name: ✅ Validation complete
        run: |
          echo "🎉 All coding standards validation passed!"
          echo "✅ Type checking: passed"
          echo "✅ ESLint validation: passed"
          echo "✅ Domain architecture: passed"
          echo "✅ Security scan: passed"
          echo "✅ Performance validation: passed"
          echo "✅ Documentation: passed"
          echo "✅ ESLint plugin: passed"
          echo "🚀 Ready for merge!"