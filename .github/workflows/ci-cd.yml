name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.changes.outputs.core }}
      browser: ${{ steps.changes.outputs.browser }}
      google: ${{ steps.changes.outputs.google }}
      images: ${{ steps.changes.outputs.images }}
      chatgpt: ${{ steps.changes.outputs.chatgpt }}
      extension: ${{ steps.changes.outputs.extension }}
      server: ${{ steps.changes.outputs.server }}
      client: ${{ steps.changes.outputs.client }}
      arvr: ${{ steps.changes.outputs.arvr }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            core:
              - 'core/**'
            browser:
              - 'browser/**'
            google:
              - 'google.com/**'
            images:
              - 'images.google.com/**'
            chatgpt:
              - 'chatgpt.com/**'
            extension:
              - 'extension.chrome/**'
            server:
              - 'nodejs.server/**'
            client:
              - 'typescript.client/**'
            arvr:
              - 'ar-vr/**'
            root:
              - 'package.json'
              - 'tsconfig*.json'
              - 'lerna.json'

  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.root == 'true' || needs.detect-changes.outputs.core == 'true' || needs.detect-changes.outputs.browser == 'true' || needs.detect-changes.outputs.google == 'true' || needs.detect-changes.outputs.images == 'true' || needs.detect-changes.outputs.chatgpt == 'true' || needs.detect-changes.outputs.extension == 'true' || needs.detect-changes.outputs.server == 'true' || needs.detect-changes.outputs.client == 'true' || needs.detect-changes.outputs.arvr == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint root
        if: ${{ needs.detect-changes.outputs.root == 'true' }}
        run: npm run lint 2>/dev/null || echo "No root lint script"
      
      - name: TypeCheck root
        if: ${{ needs.detect-changes.outputs.root == 'true' }}
        run: npm run typecheck 2>/dev/null || npx tsc --noEmit
      
      - name: Lint and TypeCheck modules
        run: |
          modules=()
          if [[ "${{ needs.detect-changes.outputs.core }}" == "true" ]]; then modules+=("core"); fi
          if [[ "${{ needs.detect-changes.outputs.browser }}" == "true" ]]; then modules+=("browser"); fi
          if [[ "${{ needs.detect-changes.outputs.google }}" == "true" ]]; then modules+=("google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.images }}" == "true" ]]; then modules+=("images.google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.chatgpt }}" == "true" ]]; then modules+=("chatgpt.com"); fi
          if [[ "${{ needs.detect-changes.outputs.extension }}" == "true" ]]; then modules+=("extension.chrome"); fi
          if [[ "${{ needs.detect-changes.outputs.server }}" == "true" ]]; then modules+=("nodejs.server"); fi
          if [[ "${{ needs.detect-changes.outputs.client }}" == "true" ]]; then modules+=("typescript.client"); fi
          if [[ "${{ needs.detect-changes.outputs.arvr }}" == "true" ]]; then modules+=("ar-vr"); fi
          
          for module in "${modules[@]}"; do
            if [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "Processing module: $module"
              cd "$module"
              
              # Install dependencies if needed
              if [[ -f "package-lock.json" ]] || [[ -f "node_modules/.package-lock.json" ]]; then
                npm ci 2>/dev/null || npm install
              fi
              
              # Run lint if script exists
              if npm run lint --silent 2>/dev/null; then
                echo "✅ Lint passed for $module"
              else
                echo "⚠️ No lint script or lint failed for $module"
              fi
              
              # Run typecheck if script exists, otherwise use tsc directly
              if npm run typecheck --silent 2>/dev/null; then
                echo "✅ TypeCheck passed for $module"
              elif [[ -f "tsconfig.json" ]]; then
                npx tsc --noEmit
                echo "✅ TypeCheck passed for $module (via tsc)"
              else
                echo "⚠️ No TypeScript config for $module"
              fi
              
              cd ..
            fi
          done

  test:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-typecheck]
    if: ${{ needs.detect-changes.outputs.root == 'true' || needs.detect-changes.outputs.core == 'true' || needs.detect-changes.outputs.browser == 'true' || needs.detect-changes.outputs.google == 'true' || needs.detect-changes.outputs.images == 'true' || needs.detect-changes.outputs.chatgpt == 'true' || needs.detect-changes.outputs.extension == 'true' || needs.detect-changes.outputs.server == 'true' || needs.detect-changes.outputs.client == 'true' || needs.detect-changes.outputs.arvr == 'true' }}
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: |
          modules=()
          if [[ "${{ needs.detect-changes.outputs.core }}" == "true" ]]; then modules+=("core"); fi
          if [[ "${{ needs.detect-changes.outputs.browser }}" == "true" ]]; then modules+=("browser"); fi
          if [[ "${{ needs.detect-changes.outputs.google }}" == "true" ]]; then modules+=("google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.images }}" == "true" ]]; then modules+=("images.google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.chatgpt }}" == "true" ]]; then modules+=("chatgpt.com"); fi
          if [[ "${{ needs.detect-changes.outputs.extension }}" == "true" ]]; then modules+=("extension.chrome"); fi
          if [[ "${{ needs.detect-changes.outputs.server }}" == "true" ]]; then modules+=("nodejs.server"); fi
          if [[ "${{ needs.detect-changes.outputs.client }}" == "true" ]]; then modules+=("typescript.client"); fi
          if [[ "${{ needs.detect-changes.outputs.arvr }}" == "true" ]]; then modules+=("ar-vr"); fi
          
          for module in "${modules[@]}"; do
            if [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "Testing module: $module"
              cd "$module"
              
              # Install dependencies
              npm ci 2>/dev/null || npm install
              
              # Run tests based on matrix
              if [[ "${{ matrix.test-type }}" == "unit" ]]; then
                npm test 2>/dev/null || npm run test:unit 2>/dev/null || echo "No unit tests for $module"
              else
                npm run test:integration 2>/dev/null || echo "No integration tests for $module"
              fi
              
              cd ..
            fi
          done

  e2e-test:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: ${{ needs.detect-changes.outputs.google == 'true' || needs.detect-changes.outputs.images == 'true' || needs.detect-changes.outputs.extension == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          modules=()
          if [[ "${{ needs.detect-changes.outputs.google }}" == "true" ]]; then modules+=("google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.images }}" == "true" ]]; then modules+=("images.google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.extension }}" == "true" ]]; then modules+=("extension.chrome"); fi
          
          for module in "${modules[@]}"; do
            if [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "E2E testing module: $module"
              cd "$module"
              
              # Install dependencies
              npm ci 2>/dev/null || npm install
              
              # Run E2E tests
              npm run test:e2e 2>/dev/null || npx playwright test 2>/dev/null || echo "No E2E tests for $module"
              
              cd ..
            fi
          done
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: "**/playwright-report/"
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-typecheck]
    if: ${{ needs.detect-changes.outputs.root == 'true' || needs.detect-changes.outputs.core == 'true' || needs.detect-changes.outputs.browser == 'true' || needs.detect-changes.outputs.google == 'true' || needs.detect-changes.outputs.images == 'true' || needs.detect-changes.outputs.chatgpt == 'true' || needs.detect-changes.outputs.extension == 'true' || needs.detect-changes.outputs.server == 'true' || needs.detect-changes.outputs.client == 'true' || needs.detect-changes.outputs.arvr == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build modules
        run: |
          modules=()
          if [[ "${{ needs.detect-changes.outputs.core }}" == "true" ]]; then modules+=("core"); fi
          if [[ "${{ needs.detect-changes.outputs.browser }}" == "true" ]]; then modules+=("browser"); fi
          if [[ "${{ needs.detect-changes.outputs.google }}" == "true" ]]; then modules+=("google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.images }}" == "true" ]]; then modules+=("images.google.com"); fi
          if [[ "${{ needs.detect-changes.outputs.chatgpt }}" == "true" ]]; then modules+=("chatgpt.com"); fi
          if [[ "${{ needs.detect-changes.outputs.extension }}" == "true" ]]; then modules+=("extension.chrome"); fi
          if [[ "${{ needs.detect-changes.outputs.server }}" == "true" ]]; then modules+=("nodejs.server"); fi
          if [[ "${{ needs.detect-changes.outputs.client }}" == "true" ]]; then modules+=("typescript.client"); fi
          if [[ "${{ needs.detect-changes.outputs.arvr }}" == "true" ]]; then modules+=("ar-vr"); fi
          
          # Build in dependency order: core -> browser -> domain modules -> apps
          build_order=("core" "browser" "google.com" "images.google.com" "chatgpt.com" "ar-vr" "typescript.client" "nodejs.server" "extension.chrome")
          
          for module in "${build_order[@]}"; do
            if [[ " ${modules[@]} " =~ " ${module} " ]] && [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "Building module: $module"
              cd "$module"
              
              # Install dependencies
              npm ci 2>/dev/null || npm install
              
              # Build
              npm run build 2>/dev/null || npx tsc 2>/dev/null || echo "No build script for $module"
              
              cd ..
            fi
          done
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/dist/
            **/build/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.root == 'true' || needs.detect-changes.outputs.core == 'true' || needs.detect-changes.outputs.browser == 'true' || needs.detect-changes.outputs.google == 'true' || needs.detect-changes.outputs.images == 'true' || needs.detect-changes.outputs.chatgpt == 'true' || needs.detect-changes.outputs.extension == 'true' || needs.detect-changes.outputs.server == 'true' || needs.detect-changes.outputs.client == 'true' || needs.detect-changes.outputs.arvr == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate || true
          
          # Check for vulnerabilities in each module
          modules=("core" "browser" "google.com" "images.google.com" "chatgpt.com" "extension.chrome" "nodejs.server" "typescript.client" "ar-vr")
          
          for module in "${modules[@]}"; do
            if [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "Security audit for $module"
              cd "$module"
              npm audit --audit-level=moderate || true
              cd ..
            fi
          done

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          # This could include deploying to a staging server, updating containers, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here
          # This could include deploying to production servers, updating containers, etc.