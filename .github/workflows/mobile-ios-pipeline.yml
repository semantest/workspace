name: iOS Build and Deploy Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    paths:
      - 'mobile/ios/**'
      - 'mobile/shared/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mobile/ios/**'
      - 'mobile/shared/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      build_type:
        description: 'Build type'
        required: true
        default: 'adhoc'
        type: choice
        options:
          - adhoc
          - appstore
          - enterprise
      deploy_to_testflight:
        description: 'Deploy to TestFlight'
        required: false
        type: boolean
        default: false
      deploy_to_appstore:
        description: 'Deploy to App Store'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write

concurrency:
  group: ios-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: true

env:
  XCODE_VERSION: '15.1'
  IOS_DEPLOYMENT_TARGET: '14.0'
  FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
  FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 5

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ios_changed: ${{ steps.changes.outputs.ios }}
      shared_changed: ${{ steps.changes.outputs.shared }}
      should_build: ${{ steps.changes.outputs.ios == 'true' || steps.changes.outputs.shared == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ios:
              - 'mobile/ios/**'
            shared:
              - 'mobile/shared/**'

  environment-setup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_build == 'true'
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      build_type: ${{ steps.env.outputs.build_type }}
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment and build type
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "build_type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "build_type=appstore" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "build_type=adhoc" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "build_type=adhoc" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "build_type=adhoc" >> $GITHUB_OUTPUT
          fi

      - name: Generate version and build number
        id: version
        run: |
          # Extract version from iOS project
          if [[ -f "mobile/ios/Semantest/Info.plist" ]]; then
            VERSION=$(plutil -extract CFBundleShortVersionString raw mobile/ios/Semantest/Info.plist 2>/dev/null || echo "1.0.0")
          else
            VERSION="1.0.0"
          fi
          
          # Generate build number
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          echo "📱 iOS Build - Version: $VERSION, Build: $BUILD_NUMBER"

  ios-security-scan:
    runs-on: macos-14
    needs: [detect-changes, environment-setup]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install security scanning tools
        run: |
          # Install MobSF CLI
          pip3 install mobsf
          
          # Install iOS security tools
          brew install carthage
          brew install swiftlint
          brew install sonar-scanner
          
          # Install Semgrep for static analysis
          pip3 install semgrep

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            mobile/ios/Pods
            ~/Library/Developer/Xcode/DerivedData
          key: ios-deps-${{ runner.os }}-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: |
            ios-deps-${{ runner.os }}-

      - name: Install CocoaPods dependencies
        working-directory: mobile/ios
        run: |
          gem install cocoapods
          pod install --repo-update

      - name: SwiftLint security analysis
        working-directory: mobile/ios
        run: |
          # Create SwiftLint config focused on security
          cat > .swiftlint-security.yml << EOF
          only_rules:
            - force_unwrapping
            - force_cast
            - force_try
            - weak_delegate
            - unused_optional_binding
            - redundant_optional_initialization
            - explicit_init
            - redundant_nil_coalescing
            - implicit_getter
            - private_over_fileprivate
            - unneeded_break_in_switch
          
          excluded:
            - Pods
            - DerivedData
          
          reporter: "json"
          EOF
          
          swiftlint lint --config .swiftlint-security.yml --reporter json > swiftlint-security-report.json || true

      - name: Semgrep security scan
        working-directory: mobile/ios
        run: |
          semgrep --config=p/security-audit \
                   --config=p/secrets \
                   --config=p/owasp-top-ten \
                   --config=p/swift \
                   --json --output semgrep-security-report.json \
                   . || true

      - name: iOS Binary Analysis
        working-directory: mobile/ios
        run: |
          # Create a quick build for analysis
          xcodebuild -workspace Semantest.xcworkspace \
                     -scheme Semantest \
                     -configuration Debug \
                     -destination 'generic/platform=iOS' \
                     -archivePath build/Semantest.xcarchive \
                     archive \
                     CODE_SIGNING_ALLOWED=NO || true
          
          # Analyze binary if build succeeded
          if [[ -f "build/Semantest.xcarchive/Products/Applications/Semantest.app/Semantest" ]]; then
            echo "📱 Analyzing iOS binary..."
            
            # Check for security flags
            otool -hv build/Semantest.xcarchive/Products/Applications/Semantest.app/Semantest > binary-analysis.txt || true
            
            # Check for hardcoded strings
            strings build/Semantest.xcarchive/Products/Applications/Semantest.app/Semantest | grep -E "(password|secret|key|token|api)" > hardcoded-strings.txt || true
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: ios-security-reports
          path: |
            mobile/ios/swiftlint-security-report.json
            mobile/ios/semgrep-security-report.json
            mobile/ios/binary-analysis.txt
            mobile/ios/hardcoded-strings.txt
          retention-days: 30

  ios-build:
    runs-on: macos-14
    needs: [detect-changes, environment-setup, ios-security-scan]
    if: needs.detect-changes.outputs.should_build == 'true'
    environment:
      name: ios-${{ needs.environment-setup.outputs.environment }}
    outputs:
      archive_path: ${{ steps.build.outputs.archive_path }}
      ipa_path: ${{ steps.build.outputs.ipa_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: mobile/ios

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            mobile/ios/Pods
            ~/Library/Developer/Xcode/DerivedData
          key: ios-deps-${{ runner.os }}-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: |
            ios-deps-${{ runner.os }}-

      - name: Install dependencies
        working-directory: mobile/ios
        run: |
          # Install Fastlane if not in Gemfile
          if [[ ! -f "Gemfile" ]]; then
            cat > Gemfile << EOF
          source "https://rubygems.org"
          
          gem "fastlane"
          gem "cocoapods"
          EOF
          fi
          
          bundle install
          pod install --repo-update

      - name: Setup Fastlane configuration
        working-directory: mobile/ios
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        run: |
          # Create Fastlane directory if it doesn't exist
          mkdir -p fastlane
          
          # Create Appfile
          cat > fastlane/Appfile << EOF
          apple_id "${{ secrets.APPLE_ID }}"
          team_id "${{ secrets.APPLE_TEAM_ID }}"
          
          app_identifier "com.semantest.app"
          EOF
          
          # Create Fastfile
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            before_all do
              setup_ci if ENV['CI']
            end
            
            desc "Build for development"
            lane :build_development do
              sync_code_signing(
                type: "development",
                readonly: true
              )
              
              build_app(
                scheme: "Semantest",
                configuration: "Debug",
                export_method: "development",
                output_directory: "./build",
                output_name: "Semantest-Development.ipa"
              )
            end
            
            desc "Build for ad-hoc distribution"
            lane :build_adhoc do
              sync_code_signing(
                type: "adhoc",
                readonly: true
              )
              
              build_app(
                scheme: "Semantest",
                configuration: "Release",
                export_method: "ad-hoc",
                output_directory: "./build",
                output_name: "Semantest-AdHoc.ipa"
              )
            end
            
            desc "Build for App Store"
            lane :build_appstore do
              sync_code_signing(
                type: "appstore",
                readonly: true
              )
              
              build_app(
                scheme: "Semantest",
                configuration: "Release",
                export_method: "app-store",
                output_directory: "./build",
                output_name: "Semantest-AppStore.ipa"
              )
            end
            
            desc "Deploy to TestFlight"
            lane :deploy_testflight do
              build_appstore
              
              upload_to_testflight(
                skip_waiting_for_build_processing: true,
                notify_external_testers: false
              )
            end
            
            desc "Deploy to App Store"
            lane :deploy_appstore do
              build_appstore
              
              upload_to_app_store(
                submit_for_review: false,
                automatic_release: false,
                force: true
              )
            end
          end
          EOF

      - name: Setup code signing
        working-directory: mobile/ios
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          # Initialize match if certificates repo exists
          if [[ -n "${{ secrets.MATCH_GIT_URL }}" ]]; then
            bundle exec fastlane match development --readonly || true
            bundle exec fastlane match adhoc --readonly || true
            
            if [[ "${{ needs.environment-setup.outputs.build_type }}" == "appstore" ]]; then
              bundle exec fastlane match appstore --readonly || true
            fi
          else
            echo "⚠️ No code signing certificates configured"
          fi

      - name: Update version and build number
        working-directory: mobile/ios
        run: |
          # Update version in Info.plist
          plutil -replace CFBundleShortVersionString -string "${{ needs.environment-setup.outputs.version }}" Semantest/Info.plist
          plutil -replace CFBundleVersion -string "${{ needs.environment-setup.outputs.build_number }}" Semantest/Info.plist
          
          echo "📱 Updated to version ${{ needs.environment-setup.outputs.version }} build ${{ needs.environment-setup.outputs.build_number }}"

      - name: Build iOS app
        id: build
        working-directory: mobile/ios
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        run: |
          BUILD_TYPE="${{ needs.environment-setup.outputs.build_type }}"
          
          case $BUILD_TYPE in
            "development")
              bundle exec fastlane build_development
              IPA_PATH="./build/Semantest-Development.ipa"
              ;;
            "adhoc")
              bundle exec fastlane build_adhoc
              IPA_PATH="./build/Semantest-AdHoc.ipa"
              ;;
            "appstore")
              bundle exec fastlane build_appstore
              IPA_PATH="./build/Semantest-AppStore.ipa"
              ;;
            *)
              echo "Unknown build type: $BUILD_TYPE"
              exit 1
              ;;
          esac
          
          # Find the actual IPA file
          ACTUAL_IPA=$(find build -name "*.ipa" | head -1)
          
          if [[ -f "$ACTUAL_IPA" ]]; then
            echo "✅ iOS build successful: $ACTUAL_IPA"
            echo "ipa_path=$ACTUAL_IPA" >> $GITHUB_OUTPUT
            
            # Get file size for reporting
            SIZE=$(stat -f%z "$ACTUAL_IPA" 2>/dev/null || stat -c%s "$ACTUAL_IPA")
            echo "📦 IPA size: $(($SIZE / 1024 / 1024)) MB"
          else
            echo "❌ iOS build failed - no IPA found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.build_number }}
          path: |
            mobile/ios/build/*.ipa
            mobile/ios/build/*.dSYM.zip
          retention-days: 30

  ios-testing:
    runs-on: macos-14
    needs: [detect-changes, environment-setup, ios-build]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            mobile/ios/Pods
            ~/Library/Developer/Xcode/DerivedData
          key: ios-deps-${{ runner.os }}-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: |
            ios-deps-${{ runner.os }}-

      - name: Install dependencies
        working-directory: mobile/ios
        run: |
          gem install cocoapods
          pod install --repo-update

      - name: Run unit tests
        working-directory: mobile/ios
        run: |
          xcodebuild test \
            -workspace Semantest.xcworkspace \
            -scheme Semantest \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO || true

      - name: Run UI tests
        working-directory: mobile/ios
        run: |
          xcodebuild test \
            -workspace Semantest.xcworkspace \
            -scheme SemantestUITests \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -resultBundlePath UITestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO || true

      - name: Generate test reports
        working-directory: mobile/ios
        run: |
          # Extract test results if available
          if [[ -d "TestResults.xcresult" ]]; then
            xcrun xccov view --report --json TestResults.xcresult > test-coverage.json || true
          fi
          
          # Generate readable test summary
          echo "# iOS Test Results" > test-summary.md
          echo "Generated: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          if [[ -f "test-coverage.json" ]]; then
            echo "## Code Coverage" >> test-summary.md
            echo "Coverage data available in test-coverage.json" >> test-summary.md
          else
            echo "## Tests" >> test-summary.md
            echo "Test execution completed - see CI logs for details" >> test-summary.md
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results-${{ needs.environment-setup.outputs.build_number }}
          path: |
            mobile/ios/TestResults.xcresult
            mobile/ios/UITestResults.xcresult
            mobile/ios/test-coverage.json
            mobile/ios/test-summary.md
          retention-days: 30

  ios-deploy:
    runs-on: macos-14
    needs: [detect-changes, environment-setup, ios-build, ios-testing]
    if: needs.detect-changes.outputs.should_build == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_testflight == 'true' || github.event.inputs.deploy_to_appstore == 'true')
    environment:
      name: ios-deployment-${{ needs.environment-setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: mobile/ios

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.build_number }}
          path: mobile/ios/build

      - name: Install Fastlane
        working-directory: mobile/ios
        run: |
          bundle install

      - name: Deploy to TestFlight
        if: needs.environment-setup.outputs.build_type == 'appstore' && (github.event.inputs.deploy_to_testflight == 'true' || github.ref == 'refs/heads/develop')
        working-directory: mobile/ios
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Find the App Store IPA
          IPA_FILE=$(find build -name "*AppStore*.ipa" | head -1)
          
          if [[ -f "$IPA_FILE" ]]; then
            echo "🚀 Deploying to TestFlight: $IPA_FILE"
            
            bundle exec fastlane run upload_to_testflight \
              ipa:"$IPA_FILE" \
              skip_waiting_for_build_processing:true \
              notify_external_testers:false \
              changelog:"Build ${{ needs.environment-setup.outputs.build_number }} - Automated deployment"
            
            echo "✅ Successfully deployed to TestFlight"
          else
            echo "❌ No App Store IPA found for TestFlight deployment"
            exit 1
          fi

      - name: Deploy to App Store
        if: github.event.inputs.deploy_to_appstore == 'true' && github.ref == 'refs/heads/main'
        working-directory: mobile/ios
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Find the App Store IPA
          IPA_FILE=$(find build -name "*AppStore*.ipa" | head -1)
          
          if [[ -f "$IPA_FILE" ]]; then
            echo "🏪 Deploying to App Store: $IPA_FILE"
            
            bundle exec fastlane run upload_to_app_store \
              ipa:"$IPA_FILE" \
              submit_for_review:false \
              automatic_release:false \
              force:true
            
            echo "✅ Successfully uploaded to App Store Connect"
          else
            echo "❌ No App Store IPA found for App Store deployment"
            exit 1
          fi

  ios-beta-distribution:
    runs-on: macos-14
    needs: [detect-changes, environment-setup, ios-build]
    if: needs.detect-changes.outputs.should_build == 'true' && needs.environment-setup.outputs.build_type == 'adhoc'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build-${{ needs.environment-setup.outputs.environment }}-${{ needs.environment-setup.outputs.build_number }}
          path: mobile/ios/build

      - name: Distribute to Firebase App Distribution
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Find the ad-hoc IPA
          IPA_FILE=$(find mobile/ios/build -name "*AdHoc*.ipa" | head -1)
          
          if [[ -f "$IPA_FILE" && -n "$FIREBASE_TOKEN" ]]; then
            echo "📱 Distributing iOS beta to Firebase: $IPA_FILE"
            
            firebase appdistribution:distribute "$IPA_FILE" \
              --app "$FIREBASE_APP_ID_IOS" \
              --token "$FIREBASE_TOKEN" \
              --groups "internal-testers" \
              --release-notes "iOS Beta Build ${{ needs.environment-setup.outputs.build_number }}"
            
            echo "✅ iOS beta distributed via Firebase"
          else
            echo "⚠️ Skipping Firebase distribution - no IPA or token"
          fi

  ios-pipeline-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, environment-setup, ios-security-scan, ios-build, ios-testing, ios-deploy, ios-beta-distribution]
    if: always() && needs.detect-changes.outputs.should_build == 'true'
    steps:
      - name: Generate iOS pipeline summary
        run: |
          echo "📱 iOS Pipeline Summary"
          echo "======================"
          echo "Environment: ${{ needs.environment-setup.outputs.environment }}"
          echo "Build Type: ${{ needs.environment-setup.outputs.build_type }}"
          echo "Version: ${{ needs.environment-setup.outputs.version }}"
          echo "Build Number: ${{ needs.environment-setup.outputs.build_number }}"
          echo ""
          echo "Job Results:"
          echo "- Security Scan: ${{ needs.ios-security-scan.result }}"
          echo "- Build: ${{ needs.ios-build.result }}"
          echo "- Testing: ${{ needs.ios-testing.result }}"
          echo "- Deploy: ${{ needs.ios-deploy.result }}"
          echo "- Beta Distribution: ${{ needs.ios-beta-distribution.result }}"
          echo ""
          
          if [[ "${{ needs.ios-build.result }}" == "success" ]]; then
            echo "✅ iOS build completed successfully"
          else
            echo "❌ iOS build failed"
          fi
          
          if [[ "${{ needs.ios-deploy.result }}" == "success" ]]; then
            echo "✅ iOS deployment completed"
          elif [[ "${{ needs.ios-deploy.result }}" == "skipped" ]]; then
            echo "⏭️ iOS deployment skipped"
          else
            echo "❌ iOS deployment failed"
          fi