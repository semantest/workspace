name: Coverage Gate

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: |
          echo "üß™ Running test coverage analysis..."
          
          # Initialize coverage tracking
          total_statements=0
          covered_statements=0
          
          # Test each module
          for module in core nodejs.server browser extension.chrome typescript.client; do
            if [[ -d "$module" && -f "$module/package.json" ]]; then
              echo "üìä Testing $module..."
              cd "$module"
              
              # Install dependencies
              npm ci 2>/dev/null || npm install
              
              # Run tests with coverage
              if npm test -- --coverage --coverageReporters=json-summary 2>/dev/null; then
                # Extract coverage data
                if [[ -f "coverage/coverage-summary.json" ]]; then
                  module_total=$(jq '.total.statements.total' coverage/coverage-summary.json)
                  module_covered=$(jq '.total.statements.covered' coverage/coverage-summary.json)
                  module_pct=$(jq '.total.statements.pct' coverage/coverage-summary.json)
                  
                  total_statements=$((total_statements + module_total))
                  covered_statements=$((covered_statements + module_covered))
                  
                  echo "‚úÖ $module coverage: ${module_pct}%"
                else
                  echo "‚ö†Ô∏è No coverage data for $module"
                fi
              else
                echo "‚ùå Tests failed for $module"
              fi
              
              cd ..
            fi
          done
          
          # Calculate overall coverage
          if [[ $total_statements -gt 0 ]]; then
            coverage_pct=$((covered_statements * 100 / total_statements))
            echo "üìä Overall coverage: ${coverage_pct}%"
            
            # Check against threshold
            COVERAGE_THRESHOLD=50
            if [[ $coverage_pct -lt $COVERAGE_THRESHOLD ]]; then
              echo "‚ùå Coverage ${coverage_pct}% is below threshold of ${COVERAGE_THRESHOLD}%"
              echo "üö´ BLOCKING: Cannot deploy with coverage below ${COVERAGE_THRESHOLD}%"
              exit 1
            else
              echo "‚úÖ Coverage ${coverage_pct}% meets threshold of ${COVERAGE_THRESHOLD}%"
            fi
          else
            echo "‚ùå No test coverage data found"
            exit 1
          fi
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìä Coverage Report
            
            Current coverage is being enforced with a **50% minimum threshold**.
            
            ‚ùå **BLOCKED**: Coverage must reach 50% before deployment.
            
            See full details in the workflow logs.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deployment-gate:
    runs-on: ubuntu-latest
    needs: coverage-check
    if: success()
    steps:
      - name: Deployment Gate Check
        run: |
          echo "‚úÖ Coverage gate passed - deployment allowed"
          echo "üöÄ Infrastructure ready for deployment"