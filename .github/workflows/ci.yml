name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, '**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  # Quick lint and type check - runs in parallel
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: false

  # Type checking - runs in parallel
  typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Type Check
        run: npx tsc --noEmit --skipLibCheck

  # Unit tests - runs in parallel
  test-unit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        workspace: [core, browser, nodejs.server, typescript.client]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Run tests for ${{ matrix.workspace }}
        run: npm test --workspace=${{ matrix.workspace }} --if-present
        env:
          CI: true
          NODE_ENV: test

  # Build check - runs after lint and typecheck
  build:
    needs: [lint, typecheck]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
            **/build
            **/.next
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Build all workspaces
        run: npm run build --if-present
        env:
          NODE_ENV: production

  # Integration tests - runs on PRs only
  test-integration:
    if: github.event_name == 'pull_request'
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: semantest
          POSTGRES_PASSWORD: semantest
          POSTGRES_DB: semantest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: |
          npm run test:integration --if-present
        env:
          CI: true
          NODE_ENV: test
          DATABASE_URL: postgresql://semantest:semantest@localhost:5432/semantest_test
          REDIS_URL: redis://localhost:6379

  # Security audit
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run dependency check
        run: npx depcheck --ignores="@types/*" --ignore-dirs=dist,build,.next
        continue-on-error: true

  # Deploy to staging (main branch only)
  deploy-staging:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test-unit]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --production
      
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
      
      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your deployment commands here
          # Examples:
          # - Docker push to registry
          # - Deploy to Kubernetes
          # - Deploy to Vercel/Netlify
          # - SSH deploy to server
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}

  # Notify on failure
  notify:
    if: failure()
    needs: [lint, typecheck, test-unit, build]
    runs-on: ubuntu-latest
    steps:
      - name: Notify team
        run: |
          echo "Pipeline failed for ${{ github.ref }}"
          # Add Slack/Discord/Email notification here